type Query {
    players: [Player]
    playerById(id: ID!): Player
    playerByName(name: String!): Player

    playerStats: [PlayerStats]
    playerStatsById(id: ID!): PlayerStats
    playerStatsByPlayerId(id: ID!): PlayerStats
    playerStatsByPlayerName(name: String!): PlayerStats

    topPlayersByWins(pageNumber: Int, limit: Int): PlayerStatsPage
    topPlayersByLosses(pageNumber: Int, limit: Int): PlayerStatsPage
    topPlayersByKills(pageNumber: Int, limit: Int): PlayerStatsPage
    topPlayersByDeaths(pageNumber: Int, limit: Int): PlayerStatsPage
    topPlayersByAssists(pageNumber: Int, limit: Int): PlayerStatsPage
    topPlayersByMoney(pageNumber: Int, limit: Int): PlayerStatsPage
}

type Mutation {
    addPlayer(name: String!): Player
    updatePlayer(id: ID!, name: String!): Player
    removePlayer(id: ID!): ID
    removePlayerByName(name: String!): ID

    updatePlayerStats(playerId: ID!, wins: Int, losses: Int, kills: Int, deaths: Int, assists: Int, money: Int): PlayerStats
    resetPlayerStats(playerId: ID!): PlayerStats
}

type Player {
    id: ID!
    name: String!
    stats: PlayerStats
}

type PlayerStats {
    id: ID!
    wins: Int!
    losses: Int!
    kills: Int!
    deaths: Int!
    assists: Int!
    money: Int!
    player: Player!
}

type PlayerStatsPage {
    items: [PlayerStats]
    totalCount: Int
}